syntax = "proto3";
package repo;




// Node is a generic information schema that reflects a collection of abstract containers ("nodes") in relation to each other and nodes in other NodeSpace channels.
// Each node has a set of associated fields and attributes, including spatial coordinates and references (links) to other nodes.
message Node {

    // ID is required and uniquely identifies a node.
    // An ID can be any UTF8 string longer than 1 character, BUT CANNOT contain a forward slash ('/') or contain any whitespace characters. 
                string              ID                          = 1;

    // Layer, if non-nil, means this node can contain other nodes -- it is also dubbed a "node space"
    // For nodes that have this Layer as the parent, their coordinates are relative to the coordinate space of this Node.
    // Nested NodeLayers allow Node placements to occur with pluggable transformations.
                NodeLayer           Layer                       = 2;

    // Tags is a collection of UTF8 identifying strings delimited by a comma (',').
    // This offers a flexible and lightweight system to filter hits during NodeScan()
                string              Tags                        = 4;
    
    // LastModified is a timestamp of when this node was last altered (in UTC seconds).
    // By default, this field is auto-updated during NodePut().
                int64               LastModified                = 7;

    // Optional values that can express commonly needed fields or allow this Node to be self-describing.
                string              TypeID                      = 10;
                string              Glyph                       = 11;
                string              Name                        = 12;
                string              Value                       = 13;

    // X1,.. are coordinates expressed in the parent's coordinate space.
    // Shoutout to the 3 domains that reflect all theoretical completeness: alpha (finite), omega (unending), and the inaccessible cardinal(s).
    // Special thanks to Michael at Vsauce: https://www.youtube.com/watch?v=SrU9YDoXE88
                double              X1                          = 21;
                double              X2                          = 22;
                double              X3                          = 23;

    // Transform means this Node and its sub nodes should be scaled by [0] (or [0,1,2]) and rotated according to thw quaternion stored in [1,2,3,4] (or [3,4,5,6])
    // If omitted, implied scale is 1 and there no rotation is applied.
    repeated    float               Transform                   = 25;

    // T is a time offset expressed in seconds.
    // A Node's parent layer defines how T=0 maps onto UTC, offering greater of precision (where precision would otherwise be "burned up" by expressing large time value).
                double              T                           = 28;

    // TSpan is a time duration or period expressed in seconds.
                double              TSpan                       = 29;

    // Links are URIs to other linked nodes.
    // [<ChURI>[<ParentLayerID>/]]<NodeID>
    repeated    string              Links                       = 40;

    // Nodes are corresponding elements of .Links (above) resolved/expanded.
    // This is only used for a server to return this.Links in their resolved form.
    // See use of LinksFetchFlags in NodeScanReq.
    repeated    Node                LinksResolved               = 41;



    //
    // Opaque payload/content attachments
    //

    // Block is any client data payload (and is generally not accessed by redwood).
    // When non-nil, it is assumed to be the output of this.BlockRaw.Unmarshal()
                Block               Block                       = 50;

    // BlockRaw is the protobufs serialization of this.Block.
    // When non-nil, it is assumed to be the output of this.Block.Marshal()
                bytes               BlockRaw                    = 51;



    //
    // Meta-fields -- these fields are not stored and are used by the client and server to communicate Node information.
    //

    // ParentID is the ID of the Node layer that this Node entry appears in (and whose fields are transformed through that layer).
    // If this field is empty or nil, the identity/default layer ID and is assumed (and is denoted as '!')
    // This field is NOT stored directly (as it is exists implicitly):
    //      - when set by a server (by request via FetchFlags), it is recovered from internal server db info.
    //      - when set by a client, the client is specifying which parent this node resides in.
                string              ParentID                    = 60;

    // ChURI is the channel state URI for this node.
    // This is only used during RPC.ChannelGenesis() and RPC.PutNode() to express a destination ChURI.
                string              ChURI                       = 61;

} 



// NodeLayer is a container for Nodes and can be regarded as a "column" object (where Nodes in this layer can be considered rows).
// A node with this NodeLayer's Node.ID as its parent means its coordinates are defined according to the parent layer.
message NodeLayer {

    // T0AsUTC expresses the UTC time index (in seconds) of a Node at T = 0.
    // This means a NodeLayer can be anchored to any point on the UTC timeline with double precision accuracy.  
    // This allows a time series of nodes to reside at any conceivable time scale: the planck scale or the timescale of the universe, 14 billion years.
                double              T0AsUTC                     = 5;

    // SpaceType specifies the implicit geometry baked into coordinates of nodes in this layer.
    // It designates a particular of 1D, 2D, 3D topography or coordinate system.
    // e.g. "cartesian/xyz", "cylindrical/angle-r-z", "spherical/r-theta-phi", "geospace-earth/lat-long-alt"
                string              SpaceType                   = 10;

    // X1UnitType is a unit MIME type descriptor
    // e.g. "angle/degrees", "distance/meters", "mass/kilograms", "temperature/celsius", "charge/amp-hours", "energy/kw-hours", "wisdom/years"
                string              X1UnitType                  = 31;
                string              X2UnitType                  = 32;
                string              X3UnitType                  = 33;

    // Curvature describes the unit curvature -- WIP
    //  N means curved aka periodic (curved, with radius 1/N)
    //  0 means linear (euclidean)
    // -N means hyperbolic (with horizon -1/N)
                // string              X1Curvature                 = 31;
                // string              X2Curvature                 = 32;
                // string              X3Curvature                 = 33;


}



// High-level RPC for PLAN.
service RPC {
    rpc         ChannelGenesis(ChannelGenesisReq)               returns (TxInfo);
    rpc         ChangeUserPerms(ChangeUserPermsReq)             returns (TxInfo);

    // NodeGet returns the node with the given ChURI, parent node ID, and node ID.
    // Assuming the given ChURI is valid for reading, an empty Node (Node.ID == nil) is returned if the parent or node ID does not exist. 
    rpc         NodeGet(NodeGetReq)                             returns (Node);

    rpc         NodeScan(NodeScanReq)                           returns (stream Node);
    rpc         NodePut(NodePutReq)                             returns (TxInfo);
}


message ChannelGenesisReq {
                Node                ChRoot                      = 1;
}

message TxInfo {
                string              StateURI                    = 1;
                bytes               TxID                        = 2;
}

message ChangeUserPermsReq {
                string              ChURI                       = 1;
                string              Address                     = 2;
                string              WriteKeypathsRegex          = 3;
                bool                CanWrite                    = 4;
}

// NodeGetReq contains the parameters for a single Node to be fetched.
message NodeGetReq {
                string              ChURI                       = 1;
                string              ParentID                    = 2;
                string              NodeID                      = 3;

    // NodeFetchFlags specifies which fields are loaded and returned for each Node scan match/hit returned by NodeScan().          
                FetchFlags          NodeFetchFlags              = 40;

    // LinksFetchFlags specifies which fields are loaded and returned for linked nodes of each Node hit returned by a NodeScan(). 
                FetchFlags          LinksFetchFlags             = 41;
}

// FetchFlags specifies what parts of a Node are loaded and returned during a NodeScan.
// Note these are bit-ORed together (and is not a normal enum)
enum FetchFlags {
    NONE                = 0;
    FIELDS              = 1;
    LINKS               = 2;
    LINKS_RESOLVED      = 4;
    BLOCK               = 8;
    BLOCK_DECODED       = 16;
}

// FilterFlags specifies various options for NodeScan.
enum FilterFlags {
    NO_SEARCH           = 0;
    LAYERS_ONLY         = 1;
    EXCLUDE_LAYERS      = 2;
}


message NodeScanReq {
                string              ChURI                       = 1;

    // Note that "!" is used to denote ChURI's default (root) node ID.
    // FUTURE: should this instead just be any valid parent node ID pathname?
                string              RegexParentID               = 3;

    // Filters to apply to each node candidate
                string              RegexNodeID                 = 10;
                string              RegexName                   = 11;
                string              RegexTags                   = 12;
                string              RegexTypeID                 = 13;

    // FilterFlags further selects which Nodes are eligible to be scan hits. 
                FilterFlags         FilterFlags                 = 14;

    // Subscribe specifies if this scan should remain open and await additional hits that may appear as state is updated. 
                bool                Subscribe                   = 20;

    // Min/max time search params (no search if TMax > TMin)
                double              TMin                        = 30;
                double              TMax                        = 31;

    // See NodeGetReq
                FetchFlags          NodeFetchFlags              = 40;
                FetchFlags          LinksFetchFlags             = 41;
}



message NodePutReq {

    // Nodes is a list of Nodes to be put (in order).
    // NodePut() will first merge these Nodes in the order they appear (or will no-op if this list is nil or empty).
    // All values of Node.ChURI must be equal or an error is returned (excluding empty/omitted URIs which denotes deferring to another Node.ChURI)
    repeated    Node                Nodes                       = 5;

    // Node is a node to be put.
    // NodePut() will merge this Node (or will no-op if this Node is nil).
    // This field is offered as convenience and is equivalent to putting this node at the end of .Nodes[]
                Node                Node                        = 6;

}

