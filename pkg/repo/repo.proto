
// See http://github.com/plan-systems/plan-protobufs/


syntax = "proto3";

package repo;

import "github.com/plan-systems/plan-protobufs/proto/ski.proto";
import "github.com/plan-systems/plan-protobufs/proto/plan.proto";
import "github.com/plan-systems/plan-protobufs/proto/pdi.proto";





// Repo is the service offered by a PLAN pnode, a headless daemon that serves one or more "seeded" communities to clients. 
service Repo {

    // Bootstraps a repo for a given member.
    rpc         SeedRepo(RepoSeed)                                  returns (plan.Status);

    // Starts a new client member session.
    // The session ID returned from the resulting MsgOp_OK should be used for sending message to member session.
    rpc         OpenMemberSession(MemberSessionReq)                 returns (stream Msg);

    // Sends msgs to channel session or the root member session itself, via Msg.SessID. 
    // A client typically only needs one open call to this because all outbound channel traffic plus messages to the 
    // session that control the member session.
    rpc         OpenMsgPipe(stream Msg)                             returns (plan.Status);



    // Pins the FS item identified by a hashname to a local file system parent dir.
    // When complete, a local pathname is returned containing the pinned FSItem/tree.
    // This is why the graphical client and repo are on the same machine. 
    // Maybe there could be such thing as a CFI node someday, but unlikely due to the pain
    //    that the member session/repo has all of the security info.
   // rpc         PinFSItem(FSItem)                               returns (stream PinStatus);

}


message MemberSessionReq {

    // Identifies a workstation/client installation (metaphorical to a "dumb" terminal in the 70's and 80's).
    // Two different members could have member sessions with the same workstation ID into a given repo (but not at the same time).
                bytes               workstationID               = 1;

    // Which community this session wants to access
                bytes               communityID                 = 2;

    // The client member's info
                pdi.MemberEpoch     member_epoch                = 3;


    // Optional -- used internally
    //          string              repo_path                   = 4;

    //          bytes               prev_session_token          = 4;
    //          bytes               next_session_token          = 5;

    // This will evolve in time, but in general, the client authenticates by submitting a token, 
    //    which is a hash of biometric-based input (e.g. pin, password, key-fob, eye scan) plus 
    //    a secure token from the previous session.
    // This is used to create a symmetric key to encrypt/decrypt the member's primary key hive
    //    that resides on the host.
                bytes               passhash                    = 5;

    // When the above symmetric key is created, it's placed it and other session info into a "secret box",
    //    and is locked with a key only the host has has, and sent back as the "session token".
    // This allows the client to present the session_token (until it expires) instead of the client 
    //    having to perform full biometric authentication.
                bytes               session_token               = 6;

}






message ChInvocation {

                bytes               chID                        = 1;

                string              ch_adapter_desc             = 10;

}



enum ChSessionFlags {

    // If set, entry bodies will be included
    INCLUDE_BODY                = 0;

    // IF set, entries that are deferred (in addition to live entries) are included.
    DEFERRED_ENTRIES            = 1;

    // If set, entries with op type EntryOp_POST_CONTENT will be sent
    CONTENT_ENTRIES             = 2;

    // If set, entries with op type EntryOp_NEW_CHANNEL_EPOCH will be sent.
    NEW_EPOCH_ENTRIES           = 3;

}




enum MsgOp {

    // This Msg functionally does nothing but serves as a heartbeat to indicate the channel session is open and operating normally. 
    OK                          = 0;

   /*****************************************************
    ** Client -> MemberSession (sessID == 0)
    **/

    // Msg.BUF0 is a ski.KeyTome protobuf that contains community keys that should be added to the member session on the repo side.
    ADD_COMMUNITY_KEYS          = 1;

    // When the repo sees this op, it will retain the community keyring up to the given unix timestamp in T0.
    // If the community keyring should not be retained, set T0 to 0 (or any timestamp in the past),
    RETAIN_COMMUNITY_KEYS       = 2;

    // Sent in response to a CH_NEW_ENTRY_READY (to the repo)
    // Msg.ITEMS is a list of raw txns of an entry ready to be committed.
    COMMIT_TXNS                 = 3;

    RESERVED_4                  = 4;
    RESERVED_5                  = 5;

   /*****************************************************
    ** MemberSession (sessID == 0) -> Client
    **/

    // Sent to the client following OpenMemberSession.
    MEMBER_SESSION_READY        = 6;

    // Sent in response to a COMMIT_TXNS (to the client)
    // msg.EntryInfo and msg EntryState contain info associated with the given txn (may be nil)
    COMMIT_TXNS_COMPLETE        = 7;

    // Sent to the member session when a new channel is to be created.  
    // BODY is a marshalled ChannelEpoch.
    CH_GENESIS_ENTRY            = 8;

    RESERVED_9                  = 9;

   /*****************************************************
    ** Client -> ChSession (sessID > 0)
    **/

    // Closes the session associated with the session ID.  Any subsequent Msgs addressed to this session ID will be ignored/dropped.
    CLOSE_CH_SESSION            = 10;

    // Sent by the client when the user wishes to author a new content entry in the channel associated with this sessID.
    // The msg's EntryInfo contains basic info about the entry to build from.
    POST_CH_ENTRY               = 11;

    // The ChSession seek to T0 and start returning a stream of CH_ENTRY msgs, effectively "replaying" the channel.
    // The param FLAGS contains number of ChSessionFlags
    RESET_ENTRY_READER          = 12;

    RESERVED_13                 = 13;
    RESERVED_14                 = 14;

   /*****************************************************
    ** ChSession -> Client
    **/

    // Sent to the client when the channel is closed
    CH_SESSION_CLOSED           = 15;

    // The msg's EntryInfo is set and reflects an entry in the channel and BUF0 is the body.
    CH_ENTRY                    = 16;

    // Sent when an entry changes liveness
    CH_ENTRY_UPDATE             = 17;

    // Sent in response to a POST_CH_ENTRY or CH_GENESIS_ENTRY to the client.
    // The msg's EntryInfo is ready to be encoded and encrypted with the body.
    // From there, client is expected to:
    //   1) pack+sign the readied EntryInfo with the entry body
    //   2) encrypt this newly generated "payload buffer" with the community key associated with CommunityEpoch cited in the EntryInfo
    //   3) Marshal the encrypted payload and community epoch ID into the final EntryCrypt.
    //   4) Encode the EntryCrypt into StorageProvider txns
    //   5) Submit the resulting txn(s) to the repo via COMMIT_TXNS.
    CH_NEW_ENTRY_READY          = 18;

    RESERVED_19                 = 19;
    RESERVED_20                 = 20;

   /*****************************************************
    ** Workstation -> Client
    **/

    // Send by the Workstation to the client.
    // BUF0 is a phost,WsLogin protobuf.
    // The client echos this msg back to the workstation on success.
    LOGIN_TO_WS_SEAT            = 21;

    // BUF0 is the ChID of the channel to open.
    START_CH_SESSION            = 22;
    

}






message Msg {

    // If originating from the client, this ID should be set to a unique, increasing ID.
    // All Msgs emitted in response to a previous Msg will cite its original ID, allowing the client to filter for a specific ID.
                uint32              ID                          = 1;

    // Describes the purpose of this op, what args it uses, and what it's intended to do.
                MsgOp               op                          = 2;

    // When a Msg originates, this value is used to route it to the correct internal channel session.
    // If 0, this msg is to/from the MemberSession itself for control messages, etc.  
                uint32              ch_sessID                   = 3;

    // If the op involves a channel entry, then it will be set here.
                pdi.EntryInfo       entry_info                  = 10;
                EntryState          entry_state                 = 11;

    // If set, the op failed for the given reason
                string              error                       = 12;

    // Params for the given MsgOp
                int64               T0                          = 20;
                uint32              FLAGS                       = 21;
                bytes               BUF0                        = 22;
    repeated    bytes               ITEMS                       = 23;

}



message GenesisSeed {
                pdi.StorageEpoch    storage_epoch               = 1;
                pdi.CommunityEpoch  community_epoch             = 2;
}


message RepoConfig {

}


message RepoSeed {
                bytes               signed_genesis_seed         = 1;
    
                string              suggested_dir_name          = 2;

    repeated    plan.ServiceInfo    services                    = 5;


}





// A community issues this to a person they want to invite into their community.  A copy of this record is written to member registry channel.
// This is passed in the clear and is used by a prospective member or guest's client to connect to a community.
message MemberSeed {
                RepoSeed            repo_seed                   = 1;

    // Exported and exported ski.KeyTome containing all keys needed for the recipient member.
                bytes               key_tome                    = 3;

                pdi.MemberEpoch     member_epoch                = 6;

    // WHO sent this invitation (note: the member's signing key is used to create this invite)
                fixed64             origin_memberID             = 7;
                ski.KeyInfo         origin_signing_key          = 8;

    // A asym key used to encrypt an InvitationResponse
    //            ski.KeyInfo         reply_to                    = 9;

}



/*****************************************************
** Internal
**/


enum EntryStatus {

    // The given entry has been confirmed to be associated with unauthorized activity, a security breach, or inappropriate behavior.
    DISBARRED                   = 0;

    // This entry has yet to merged into the repo's channel subsystem. 
    AWAITING_MERGE              = 1;

    // This entry has been merged into the channel. 
    MERGED                      = 2;

    // The given entry is deferred as a result of one of many possibilities encountered during 
    // channel entry validation (see design-docs/PLAN-Proof-of-correctness.md). Specifically, 
    // this means EntryState.Flags lacks one or more req'd flags in order for the entry to be live.
    DEFERRED                    = 3;

    // The given entry is considered authentic and a live operating part of the local community repo.
    // The corresponding EntryState.Flags contains all the flags required for an entry to be live.
    LIVE                        = 4;
}



// EntryFlags are bit shift values (not actual values)
enum EntryFlag {

    // If not set, one or more parts of this entry are not self-consistent and/or do not self-validate.
    // By definition, once this flag is cleared, it will never reappear.
    WELL_FORMED                 = 0;

    // Set when this entry's author dependency has been written
    AUTHOR_DEPENDENCY_WRITTEN   = 1;

    // Set when this entry's ACC dependency has been written
    ACC_DEPENDENCY_WRITTEN      = 2;

    // Set if this entry's URID appears in the community's list of genesis entries.
    GENESIS_ENTRY_VERIFIED      = 3;

    // Set if this entryOp == NEW_CHANNEL_EPOCH and has no previous channel epoch TID set.
    IS_CHANNEL_GENESIS          = 4;

}




message EntryState {

    // Incremented each time this entry is mutated.

                uint32              flags                       = 1;       // Union of ChEntryFlags

                EntryStatus         status                      = 2;

    // IF len() == 0, the implied body TID is the same as the entry info's TID (done to save space)
    // When entry 1 is superseded by entry 2, entry 2's TID appears in entry 1's EntryState.
                bytes               liveIDs                     = 10;

}




message ChMgrState {

    // Incremented each time an entry is reversed/overturned.
    // This supports revalidation bookkeeping (triggered by a reversed entry)
                int64               validation_rev              = 1;

}





message ChStoreState {

    // Only set when this channel is in the process of being created.
    //            bool                genesis_mode                = 1;

                bytes               channelID                   = 1;

                string              ch_protocol                 = 2;

    // All entry TIDs up to this point (and including this TID) are not pending active validation.
                bytes               validated_upto              = 3;

    //  If not set, this channel is not yet able to validate entries (e.g. ChUnknown can't)
                bool                merge_enabled               = 4;

                pdi.ChannelInfo     channel_info                = 9;
    

}




message IntSet {

    repeated    uint64              ints                        = 1;

    // Range: [From, To) 
                uint64              from                        = 2;
                uint64              to                          = 3;

}



message ChDependency {

    // Time index (and later) of applicable channel entries 
                int64               dep_time                    = 1;

}


