syntax = "proto3";
package repo;


// High-level channel repository RPC.
service RepoGrpc {

    // RepoService opens the specified channel at a given state and executes a stream of requests from the client.
    // The return stream reports completion or status of active requests and remains open as long as the client stream remains open.
    rpc         RepoService(stream ChReq)               returns (stream ChMsg);

}


// ChReqOp is a code describing the purpose and format of the ChReq that it resides in.
enum ChReqOp {
    NoOp                    = 0;

    Get                     = 1;    // Get the entry at <Keypath>
    GetShallow              = 2;    // Shallow iterate through <Keypath>
    GetDeep                 = 3;    // Deep iterate through <Keypath>

    PutEntry                = 8;    // Store each entry at ChReq.Entries[].Keypath respectively

    // CancelChReq tells the server to cancel the ChReq referenced by ChReq.ReqID.
    CancelChReq             = 16;

    // Modifies session access to this open channel, allowing a caller to do things like:
    //   - establish access as a specific identity
    //   - supply a crypto info, ultimately allowing decryption to occur for subsequent access.
    AccessGrant             = 30;

    // ServeChannel serves the channel specified by the channel state URI contained in ChReq.Entries[0].Value.
    // Fully qualified channel URIs take the form of "domain-name/channelID"
    // When full service is available, the server will send a ChMsgOp.ChOpened message.
    ServeChannel            = 41;

    // ChannelGenesis creates a new channel in the domain name specified in ChReq.Entries[0].Value.
    // ChReq.Entries[1..] are entries that are written into the new channel (and are part of the genesis transaction).
    // When the channel has been created, the server will send a ChMsgOp.ChOpened message.
    ChannelGenesis          = 42;
}

// ChReqOptions are additional flags that can be applied to a ChReq.
enum ChReqOptions {

    // QueueFIFO refers to how all ChReqs are sequentially queued for execution on the channel being served.
    // This is the default behavior and is only present to satisfy protobufs wanting a 0 value to start with.
    QueueFIFO               = 0; 

    // ContinuousSync means that this ChReq should remain "subscribed" to its query and get entry updates for qualifying Keypaths.
    // When this is set, ChMsgOp.SyncComplete is sent each time all pending ch state changes have been sent. 
    ContinuousSync          = 16;

    // Returns only Keypath strings (no data retrieval occurs for each returned ChEntry). 
    ReturnKeypathsOnly      = 32;
}


// ChReq is generalized request sent from client to server via ServeChannel(). 
// The client sends a stream of ChReqs and monitors the ChMsgs that a server sends back to monitor status and completion.
message ChReq {

    // ReqID is an optional client-assigned ID typically used by the client to determine the originating request that generated a particular ChMsg.
                int32               ReqID                       = 2;

    // ReqOp requests that the given op to be execute on ChReq.Entries
                ChReqOp             ReqOp                       = 5;

    // Entries are the operands of ChReq.ChOp.
    repeated    ChEntry             Entries                     = 6;

    // ChReqOpts offers options and flexibility how this ChReq executes.
                ChReqOptions        Options                     = 8;
                
    // RegexTypeID is an optional regex filter that looks for matches on ChEntry.TypeID.
                string              RegexTypeID                 = 13;           
}


// ChMsgOp is a collection of ChMsgOp values that have a special meaning in a ChMsg. 
enum ChMsgOp {

    // RecvEntry means than ChMsg.Entry is being sent in response to ChMsg.ReqID.
    RecvEntry           = 0;

    // ChReqDiscarded means the referenced ChReq failed and/or has been cancelled.
    // If ChMsg.Entry.EntryData != nil, then is a serialized ChReqErr describing why it was discarded.
    ChReqDiscarded      = 1;

    // ChReqComplete means the referenced ChReq (via ChMsg.ReqID) has successfully completed.
    // If a transaction was generated from this op, ChMsg.Entry.Attachment is set to the TxID.
    ChReqComplete       = 2;

    // SystemMsg means that ChMsg.Entry is an out-of-band system message to be interpreted by the client runtime.
    SystemMsg           = 3;

    // ChOpened is one of the first messages returned following when a client calls ServeChannel().
    // ChMsg.Entry.Value is set to the channel state URI that is now open.
    ChOpened            = 10;

    // SyncComplete means all pending applicable state changes have been sent.
    // This msg is only sent if a ChReq specified ContinuousSync mode. 
    SyncComplete        = 11;
}


// ChMsg is the generalized response object a server sends to the client as it processes each ChReq sent by the client. 
message ChMsg {

    // MsgOp tells the client with this channel open that kind of ChMsg this is.
                ChMsgOp             MsgOp                       = 1;
                
    // ReqID is set to value the originating ChReq.ReqID was set to.
                int32               ReqID                       = 3;

    // This is a payload sent from the server to the client.
                ChEntry             Entry                       = 4;
}


// ChEntry is stored at a given Keypath a channel Repo.  
// It is a lightweight and self-describing unit of information intended for general purpose.
message ChEntry {

    // Keypath is a POSIX-style pathname of this ChEntry (for safety, "/" specifies the root path, not "").
                string              Keypath                     = 1;

    // LastModified is a timestamp of when this entry was last altered (in UTC seconds).
    // This timestamp is auto-updated when it is written.
                int64               LastModified                = 2;

    // Optional values that can express commonly needed fields or allow this entry to be self-describing.
                string              TypeID                      = 10;
                string              Label                       = 11; 
                string              Value                       = 12; 

    // X1, X2, and X3 are coordinates or values expressed in any unit.
    // A channel client can later declare how to interpret these coordinates so that a channel server and provide indexed services.
    // Shoutout to the 3 domains that reflect all theoretical completeness: alpha (finite), omega (unending), and the inaccessible cardinal(s).
    // Special thanks to Michael at Vsauce: https://www.youtube.com/watch?v=SrU9YDoXE88
                double              X1                          = 21;
                double              X2                          = 22;
                double              X3                          = 23;

    // Attachment is useful to attach any buffer than can be decoded based on ChEntry.KeyPath and/or ChEntry.TypeID.
    // It should generally should be limited to around 1MB (hard limit is 4MB).
                bytes               Attachment                  = 40;
}


// ErrCode is used to unambiguously express common errors.
enum ErrCode {
    NoErr                       = 0;

    UnnamedErr                  = 5000;
    ChReqCancelled              = 5001;

    ViolatesAppendOnly          = 5100;
    InsufficientPermissions     = 5101;

    ChReqNotFound               = 5010;
    ChReqIDInUse                = 5011;
    InvalidChURI                = 5020;
    ChURINotFound               = 5021;
}


// ChReqErr wraps any error and is typically used in conjunction with ChMsgOp.ChReqDiscarded
message ChReqErr {
                ErrCode             Code                        = 1;
                string              Msg                         = 2;
}





// message SpaceNode {

//     // Transform means this Node and its sub nodes should be scaled by [0] (or [0,1,2]) and rotated according to thw quaternion stored in [1,2,3,4] (or [3,4,5,6])
//     // If omitted, implied scale is 1 and there no rotation is applied.
//     // For nodes that have this Node as the parent, their coordinates are relative to the coordinate space of this Node.
//     // Nested Transforms allow Node placements to be of arbitrary precision 
//     repeated    float               Transform                   = 4;
// }



// Reserved Keypath symbols used within ChEntry.Keypath during ChReqOp.Put
// $SELF_UUID       -- inserts an ID that reflects a unique ID associated with the current 
// $ITEM_UUID       -- inserts a newly generated inque value 
