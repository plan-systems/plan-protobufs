syntax = "proto3";
package repo;


// High-level channel repository RPC.
service RepoGrpc {

    // RepoServiceSession opens the specified channel at a given state and executes a stream of requests from the client.
    // The return stream reports completion or status of active requests and remains open as long as the client stream remains open.
    rpc 		RepoServiceSession(stream ChReq)         		returns (stream ChMsg);

}


enum Const {
    ConstDefs               = 0;

	// TIDSz is the byte size of a TID, a hash with an embedded time index.
	// The purpose of a TID is that it can be sorted chronologically to facilitate storage, searching, and syndication.
	//
	// Byte layout is designed so that TIDs are sortable by the embedded timestamp:
	//    0:6   - Standard UTC timestamp in unix seconds (big endian)
	//    6:8   - Timestamp fraction (big endian)
	//    8:30  - Signature/hash
	TIDSz                  	= 30;

	// TIDTimestampSz is the number of left-hand bytes in a TID reserved for a time index value.
    TIDTimestampSz 			= 8;

    // DefaultGrpcServicePort is the TCP port the service RepoGrpc should run on by default.
    DefaultGrpcServicePort  = 5191;

}


// ChReqOp is a code describing the purpose and format of the ChReq that it resides in.
enum ChReqOp {
    
    // Auto means to see if ChReq.PutReq or ChReq.GetReq is set and execute whichever is set.
    Auto                    = 0;

    // CancelReq tells the server to close/cancel the ChReq referenced by ChReq.ReqID.
    CancelReq               = 1;

    // Modifies session access, allowing a caller to do things like:
    //   - establish access as a specific identity
    //   - supply a crypto info, ultimately allowing decryption to occur for subsequent access.
    AccessGrant             = 2;

}


// KeypathScope specifies which entires are considered relevant to a given Keypath. 
enum KeypathScope {
    NoScope                 = 0;

    EntryAtKeypath          = 0x01;
    ChildEntries            = 0x02;
    AllSubEntries           = 0x06;
}



message GetOp {

    // Keypath and Scope together imply which entries are returned.
                string              Keypath                     = 2;
                KeypathScope        Scope                       = 3;

    // MaintainSync causes the ChReq to remain open and receive entry updates for qualifying keypaths.
    // The server sends the msg ChMsgOp.SyncStep following each atomic batch of updates.
                bool                MaintainSync                = 9;

}

// PutOp atomically commits Entries[] to the given ChReq.URI.
// In the corresponding reply ReqComplete message, ChMsg.Attachment is set to the resulting TxID.
message PutOp {

    // ChannelGenesis creates a new channel in the domain name specified in ChReq.URI.
    // ChReq.Entries[] are entries that are written into the new channel (and are part of the genesis tx).
    // In the corresponding reply ReqComplete message, ChMsg.ValueStr is set to the URI of the newly created channel.
                bool                ChannelGenesis              = 4;

	// Entries the channel entries to be written (or deleted)
    repeated    ChMsg               Entries                     = 6;

}


// ChReq is generalized request sent from client to server via ServeChannel(). 
// The client sends a stream of ChReqs and monitors the ChMsgs that a server sends back to monitor status and completion.
message ChReq {

    // ReqOp requests that the given op to be execute on ChReq.Entries
                ChReqOp             ReqOp                       = 1;

    // ReqID is a client-assigned ID that allows the client and server to reference this ChReq in the future.
    // ChMsg.ReqComplete & ReqDiscarded is how the server signals when this request is considered closed/complete.
                int32               ReqID                       = 2;

    // URI identifies the channel URI that this ChReq is requesting to access.
    // Channel URIs take the form of "DomainName/ChannelID".
                string              ChURI                       = 3;       
                
    // ForkReqID specifies an open ChReqID to to use for state & credentials. 
    //            int32               ForkReqID                   = 4;

    // When ReqOp == ChReqOp.Auto, one of these ops is to be executed.
    // It's an error to set more than one of these. 
                GetOp               GetOp                       = 10;          
                PutOp               PutOp                       = 11;   
}


// ChMsgOp is a collection of ChMsgOp values that have a special meaning in a ChMsg. 
enum ChMsgOp {
    
    // ChEntry means this is a content msg being sent in response to ChMsg.ReqID.
    ChEntry                 = 0;

    // ReqComplete means the referenced request (via ChMsg.ReqID) has successfully completed.
    // Other values in the ChMsg are contextual based on request that was completed.
    ReqComplete             = 1;

    // ReqDiscarded means the referenced request failed and/or has been canceled.
    // If ChMsg.Attachment != nil, then it is a serialized ReqErr describing why it was discarded.
    // As with ReqComplete, the referenced request is now complete, so the given ReqID is now available for (re)use.
    ReqDiscarded            = 3;

    // SyncStep means all pending applicable state changes have been sent for the given ChMsg.ReqID.
    // This msg is only sent if a ChReq specified requested GetAndSync mode. 
    SyncStep                = 11;

}



// ChMsg is the generalized response object a server sends to the client as it processes each ChReq sent by the client. 
message ChMsg {

    /*
    ** 
    **
    ** META FIELDS 
    ** These fields are NOT channel entry content fields.  They are used for Repo service request/response flow or are meta info. 
    ** They are zeroed before this ChMsg is stored as a channel entry.
    **
    ** 
    **/

    // Op tells the client with this channel open that kind of ChMsg this is.
                ChMsgOp             Op                          = 1;
                
    // ReqID references the originating ChReq that this ChMsg is in response to.
                int32               ReqID                       = 2;
                    
    // Keypath is a POSIX-style pathname of this channel entry (for safety, "/" specifies the root path, not "").
    // Each path component in a valid Keypath must have a length of at least 2.
    // Any channel entry written to an invalid keypath will cause InvalidKeypath to be returned. 
                string              Keypath                     = 5;


    /*
    ** 
    ** 
    ** CONTENT FIELDS
    ** These fields are considered the channel entry data.
    ** 
    ** 
    **/

	// LastModified is a timestamp of when this entry was last altered (in UTC seconds << 16).
    // This timestamp is updated when it is written to a channel.
                int64               LastModified                = 10;

    // Optional values that can express commonly needed fields or allow this entry to be self-describing.
                string              TypeID                      = 20;
                string              Label                       = 21; 
                string              ValueStr                    = 22; 
                int64               ValueInt                    = 23;

    // X1, X2, and X3 are coordinates or values expressed in any unit.
    // A channel client can later declare how to interpret these coordinates so that a channel server and provide indexed services.
    // Shoutout to the 3 domains that reflect all theoretical completeness: alpha (finite), omega (unending), and the inaccessible cardinal(s).
    // Special thanks to Michael at Vsauce: https://www.youtube.com/watch?v=SrU9YDoXE88
                double              X1                          = 31;
                double              X2                          = 32;
                double              X3                          = 33;

    // Attachment is useful to attach any buffer, typically decoded based on ChMsg.Op, ChMsg.Keypath, or ChMsg.TypeID.
    // Max size is limited to 3MB.
                bytes               Attachment                  = 40;
            
}


// ErrCode expresses status and error codes.
enum ErrCode {
    NoErr                       = 0;

    UnnamedErr                  = 5000;
    InternalErr                 = 5001;
    UnsupporteReqOp             = 5002;
    ReqCanceled              	= 5003;
	ShuttingDown                = 5004;
	Disconnected				= 5005;

    
    ReqIDNotFound               = 5010;
    InvalidKeypath              = 5020;
    InvalidURI                  = 5021;
    FailedToOpenChURI           = 5022;

    NothingToCommit             = 5030;
    CommitFailed                = 5031;

    CorruptChEntry              = 5040;

    ViolatesAppendOnly          = 5100;
    InsufficientPermissions     = 5101;

    ChProtocolNotRecognized     = 5201;
}


// ReqErr wraps errors and is typically used in conjunction with ChMsgOp.ChReqErr
message ReqErr {

                ErrCode             Code                        = 1;

    // Msg is a human-readable info string that offers amplifying info about the given error.
                string              Msg                         = 2;

}


// Tx contains all the info for a channel URI change.
// TODO -- this is a short-term workaround to get things running and it contents will be replaced with proper fields.
message Tx {

	// Derivative content (set to nil for serialization)
				bytes				TID							= 1;
				bytes				Hash						= 2;

	// Content
				ChStateURI        	ChURI                       = 3;          
				PutOp               PutOp                       = 11; 
				      
}


// ChStateURI fully specifies a channel URI at a given state.
message ChStateURI {

				// DomainName specifies the parent community/context name of the given channel ID.  Domain names are how 
				// channel syndication properties, storage quotas, and prioritization are possible at the vault level.  
				string              DomainName                	= 1;

				// ChID_TID specifies a channel's TID for a given domain name.
				// IF this is not set, then ChID is instead used to contain the ChID.
				bytes               ChID_TID                	= 2;

				// ChID a UTF8 string name of this channel.
				// IF both ChID and ChID_TID are set, ChID is assumed to contain the base64 representation of ChID_TID.
				string              ChID             			= 3;

				// StateID is a token that expresses a specific state of the referenced channel. 
				// If unspecified, the latest state of the channel is implied.
				string				StateID						= 4;

				// StateCtxID is a context identifer of the issuer of StateID. 
				// A state ID token only has meaning relative to the context it was issued against. 
				// If unspecified, the given StateID is a taken with absolute meaning (and not contextual)
				string				StateCtxID   				= 5;
}


// message SpaceNode {

//     // Transform means this Node and its sub nodes should be scaled by [0] (or [0,1,2]) and rotated according to thw quaternion stored in [1,2,3,4] (or [3,4,5,6])
//     // If omitted, implied scale is 1 and there no rotation is applied.
//     // For nodes that have this Node as the parent, their coordinates are relative to the coordinate space of this Node.
//     // Nested Transforms allow Node placements to be of arbitrary precision 
//     repeated    float               Transform                   = 4;
// }



// Reserved Keypath symbols used within ChEntry.Keypath during ChReqOp.Put
// $SELF_UUID       -- inserts an ID that reflects a unique ID associated with the current 
// $ITEM_UUID       -- inserts a newly generated inque value 
