syntax = "proto3";
package repo;


// High-level channel repository RPC.
service RepoGrpc {

    // RepoServiceSession opens the specified channel at a given state and executes a stream of requests from the client.
    // The return stream reports completion or status of active requests and remains open as long as the client stream remains open.
    // The beating heart of PLAN: channels, streams, information, security, trust, sessions.
    rpc         RepoServiceSession(stream ChReq)                 returns (stream Node);

}


enum Const {
    ConstDefs               = 0;

    // TIDSz is the byte size of a TID, a hash with a leading embedded big endian binary time index.
    // The purpose of a TID is that it can be sorted chronologically in order to facilitate 
    // storage, searching, and syndication in large-scale (real-world) TID blob repositories.
    //
    // Byte layout is designed so that TIDs are sortable by the embedded timestamp:
    //    0:6   - Standard UTC timestamp in unix seconds (big endian)
    //    6:8   - Timestamp fraction (big endian)
    //    8:32  - Signature/hash
    TIDSz                   = 30;

    // TIDEncodedLen is the ASCII-compatible string length of a (binary) TID encoded into its base32 form.
    TIDEncodedLen           = 48;

    // TIDTimestampSz is the number of left-hand bytes in a TID reserved for a time index value.
    TIDTimestampSz          = 8;

    // DefaultGrpcServicePort is the TCP port the service RepoGrpc should run on by default.
    DefaultGrpcServicePort  = 5192;

}


// ChReqOp is a code describing the purpose and format of the ChReq that it resides in.
enum ChReqOp {
    
    // Auto means to see if ChReq.PutReq or ChReq.GetReq is set and execute whichever is set.
    Auto                    = 0;

    // CancelReq tells the server to close/cancel the ChReq referenced by ChReq.ReqID.
    CancelReq               = 1;

    // Modifies session access, allowing a caller to do things like:
    //   - establish access as a specific identity
    //   - supply a crypto info, ultimately allowing decryption to occur for subsequent access.
    AccessGrant             = 2;

}


// KeypathScope specifies which entires are considered relevant to a given Keypath. 
enum KeypathScope {
    NoScope                 = 0;

    EntryAtKeypath          = 0x01;
    Shallow       			= 0x02;
    ShallowAndDeep	       	= 0x04;
}


// GetOp gets the all the channel entries for the given Keypath and the specified scope.
message GetOp {

    // Keypath and Scope together imply which entries are returned.
                string              Keypath                     = 2;
                KeypathScope        Scope                       = 3;

    // MaintainSync causes the ChReq to remain open and receive state updates for qualifying keypaths via ChSyncSuspend/ChSyncResume 
                bool                MaintainSync                = 9;

}


// TxOp atomically commits Entries[] (patches) to the given channel URI
// In the corresponding reply ReqComplete message, Node.Attachment is set to the resulting TxID.
message TxOp {

    // ChStateURI expresses the channel URI that this op applies to.
                ChStateURI          ChStateURI                  = 3;

    // ChannelGenesis creates a new channel in the domain name specified in ChReq.URI.
    // ChReq.Entries[] are entries that are written into the new channel (and are part of the genesis tx).
    // In the corresponding reply ReqComplete message, Node.Str is set to the URI of the newly created channel.
                bool                ChannelGenesis              = 4;

    // Entries are changes to be applied to the target channel.
    repeated    Node                Entries                     = 6;

}


// ChReq is generalized request sent from client to server via ServeChannel(). 
// The client sends a stream of ChReqs and monitors the Nodes that a server sends back to monitor status and completion.
message ChReq {

    // ReqOp requests that the given op to be execute on ChReq.Entries
                ChReqOp             ReqOp                       = 1;

    // ReqID is a client-assigned ID that allows the client and server to reference this ChReq in the future.
    // Node.ReqComplete & ReqDiscarded is how the server signals when this request is considered closed/complete.
                int32               ReqID                       = 2;

    // URI identifies the channel URI that this ChReq is requesting to access.
    // Channel URIs take the form of "<DomainName>[/<ChID>[/<StateURI>]]".
                string              ChURI                       = 3;
                
    // ChStateURI expresses the channel URI that this op applies to.
    // If not set, it will be set by parsing ChReq.ChURI.
                ChStateURI          ChStateURI                  = 4;      

    // ForkReqID specifies an open ChReqID to to use for state & credentials. 
    //            int32               ForkReqID                   = 4;

    // When ReqOp == ChReqOp.Auto, one of these ops is to be executed.
    // It's an error to set more than one of these. 
                GetOp               GetOp                       = 10;          
                TxOp                TxOp                          = 11;   
}


// NodeOp is a collection of NodeOp values that express how a Node is to be interpreted.
enum NodeOp {
    
    // ChEntry means this is a ch entry content node
    ChEntry                 = 0;

    // ChEntryDelete removes the entry at the given path
    ChEntryRemove           = 2;

    // ChEntryRemoveAll removes the entry at the given path and all subs.
    ChEntryRemoveAll        = 3;

    // ReqComplete means the referenced request (via Node.ReqID) has successfully completed.
    // Other values in the Node are contextual based on request that was completed.
    ReqComplete             = 4;

    // ReqDiscarded means the referenced request failed and/or has been canceled.
    // If Node.Attachment != nil, then it is a serialized ReqErr describing why it was discarded.
    // As with ReqComplete, the referenced request is now complete, so the given ReqID is now available for (re)use.
    ReqDiscarded            = 5;

    // ChSyncSuspend signals to the client that a state update is about to be sent (in the form of a sequence of entry ops).
    // When all state change messages have been sent, the server sends ChSyncResume.
    ChSyncSuspend           = 8;

    // ChSyncResume signals that all pending state changes are have been sent (i.e. channel state is now synced)
    // If Node.Str is set, it's set to a StateURI that represents the current channel state. 
    ChSyncResume            = 9;

}

// Node is the generalized response object a server sends to the client as it processes each ChReq sent by the client. 
// Node is also the standard "atomic" unit of information in a channel.
// A repo channel is a key-value trie data structure where Node.Keypath maps to a Node body.
message Node {

    /*
    ** 
    **
    ** META FIELDS 
    ** These fields are NOT channel entry content fields.  They are used for Repo service request/response flow or are meta info. 
    ** They are zeroed before this Node is stored as a channel entry.
    **
    ** 
    **/

    // Op tells the client with this channel open that kind of Node this is.
                NodeOp              Op                          = 1;
                
    // ReqID references the originating ChReq that this Node is in response to.
                int32               ReqID                       = 2;
                    
    // Keypath is a POSIX-style pathname of this channel entry (for safety, "/" specifies the root path, not "").
    // Each path component in a valid Keypath must have a length of at least 2.
                string              Keypath                     = 5;


    /*
    ** 
    ** 
    ** CONTENT FIELDS
    ** These fields are considered the channel entry data.
    ** 
    ** 
    **/

	// RevID is the timestamp when this entry was submitted to the host channel in UTC seconds (where one sec is 2^16 ticks)
				int64               RevID		                = 10;
				
	// ParentRevID identifies the RevID of the Node instance that this node is replacing.
	// If this is 0, a Node at this keypath did not exist when this Node was submitted. 
				int64				ParentRevID					= 11;

    // TypeID is a "multi-codec" style (POSIX-style type pathname) that self-describes this Node and the information within it. 
                string              TypeID                      = 15;

    // GlyphURI is a loose analog to the conventional use of "icon" and refer to a unit-sized graphic or volume.
    // Glyph URIs can allow the encoding of arbitrary parameters (such as color), allowing variants to be offered at no cost.
    // A given glyph URI often has both a 2D ("sprite") and 3D object form and is chosen based on where it's instanced.
                string              GlyphURI                    = 20; 

    // Label is a human readable descriptor for this item, with LabelFormat describing what format it's in.
                string              Label                       = 22;
                TextFormat          LabelFormat                 = 23;

    // Optional values that can express needed values in accordance of TypeID .
                string              Str                         = 24; 
                int64               Int                         = 25;

    // Attachment is useful to attach any buffer, typically decoded based on Node.Op, Node.Keypath, or Node.TypeID.
    // Max size is limited to 3MB.
                bytes               Attachment                  = 30;
                
    // AssetURI specifies an asset URI (typically implicitly placed at this node's position, scale, and orientation.
    // Asset URIs allow the encoding of arbitrary parameters (such as color), allowing variants to be offered at no cost.
                string              AssetURI                    = 35; 

    // X1, X2, and X3 are coordinates or values expressed in any unit.
    // A channel client can later declare how to interpret these coordinates so that a channel server and provide indexed services.
    // Shoutout to the 3 domains that reflect all theoretical completeness: alpha (finite), omega (unending), and the inaccessible cardinal(s).
    // Special thanks to Michael at Vsauce: https://www.youtube.com/watch?v=SrU9YDoXE88
                double              X1                          = 41;
                double              X2                          = 42;
                double              X3                          = 43;
    
    // Scale1 to Scale3 express the scale of this Node. 
    // If all three values are 0, they are all implicitly 1.
    // If Scale2 or Scale3 == 0, then it is implicitly Scale1.
                float               Scale1                      = 51;
                float               Scale2                      = 52;
                float               Scale3                      = 53;

    // Rotate1 - Rotate3 the orientation of this Node using Euler angles.
                float               Rotate1                     = 60;
                float               Rotate2                     = 61;
                float               Rotate3                     = 62;

}

enum TextFormat {
    PlainText               = 0;
    RTF                     = 1;
    HTML                    = 2;
}


// ErrCode expresses status and error codes.
enum ErrCode {
    NoErr                       = 0;

    UnnamedErr                  = 5000;
    InternalErr                 = 5001;
    UnsupporteReqOp             = 5002;
    ReqCanceled                 = 5003;
    ShuttingDown                = 5004;
    Disconnected                = 5005;

    ReqIDNotFound               = 5010;
    InvalidKeypath              = 5020;
    InvalidURI                  = 5021;
    FailedToOpenChURI           = 5022;

    NothingToCommit             = 5030;
    CommitFailed                = 5031;
    DomainNotFound              = 5032;

    CorruptChEntry              = 5040;

    ViolatesAppendOnly          = 5100;
    InsufficientPermissions     = 5101;

    ChProtocolNotRecognized     = 5201;
}


// ReqErr wraps errors and is typically used in conjunction with NodeOp.ChReqErr
message ReqErr {

                ErrCode             Code                        = 1;

    // Msg is a human-readable info string that offers amplifying info about the given error.
                string              Msg                         = 2;

}


// Tx contains all the info for a channel URI change.
// TODO -- this is a short-term workaround to get things running and it contents will be replaced with proper fields.
message Tx {

    // Derivative content (set to nil for serialization)
                bytes               TID                         = 1;
                bytes               Hash                        = 2;

    // Content
                TxOp                TxOp                        = 10; 
                      
}


// ChStateURI fully specifies a channel URI at a given state.
message ChStateURI {

                // DomainName specifies the parent community/context name of the given channel ID.  Domain names are how 
                // channel syndication properties, storage quotas, and prioritization are possible at the vault level.  
                string              DomainName                  = 1;

                // ChID_TID specifies a channel's TID for a given domain name.
                // If this is not set, then the channel ID is considered to be non-binary and is contained in ChID.
                bytes               ChID_TID                    = 2;

                // ChID is a UTF8 string name of this channel.
                // IF both ChID and ChID_TID are set, ChID is assumed to contain the base32 representation of ChID_TID.
                string              ChID                        = 3;

                // StateURI is a token that expresses a specific channel state.
                // If this is not set, the latest state of the channel is implied.
                // By convention this is a POSIX-style pathname in the form "<StateContextID>[/<SubStateID>]*"
                string              StateURI                    = 4;
}


// RawTx reflects a Tx that has been is packed and sealed.
message RawTx {

    // TID identifies this Txn (and is a hash or signature for contained Tx)
                bytes               TID                         = 1;

   // TxnStatus information about the associated txn
                TxnStatus           TxnStatus                   = 2;

                bytes               Header                      = 10;
                bytes               Body                        = 11;
}


// TxnStatus describes the status of a Tx or RawTx
enum TxnStatus {

    // New means tx is yet to be committed to storage
    New                         = 0;
    
}

// OrgFlags is for minor UX adaptations in default naming, nomenclature, and phraseology.
enum OrgFlags {
    IsCommunity                 = 0;

    IsLegalOrg                  = 0x0001;
    IsCompany                   = 0x0002;
    IsFederation                = 0x0004;
    IsPersonal                  = 0x0010;
}


message OrgInfo {

                string              CommonName                  = 1;
                string              FormalName                  = 2;
    repeated    string              DomainNames                 = 3;

                OrgFlags            OrgFlags                    = 10;
                string              GenesisTID                  = 11;

}



// Reserved Keypath symbols used within ChEntry.Keypath during ChReqOp.Put
// $SELF_UUID       -- inserts an ID that reflects a unique ID associated with the current 
// $ITEM_UUID       -- inserts a newly generated inque value 
