syntax = "proto3";
package repo;


// High-level channel repository RPC.
service RepoGrpc {

    // RepoService opens the specified channel at a given state and executes a stream of requests from the client.
    // The return stream reports completion or status of active requests and remains open as long as the client stream remains open.
    rpc         RepoServicePipe(stream ChReq)               returns (stream ChMsg);

}


// ChReqOp is a code describing the purpose and format of the ChReq that it resides in.
enum ChReqOp {
    NoOp                    = 0;

    // CancelReq tells the server to close/cancel the ChReq referenced by ChReq.ReqID.
    CancelReq               = 1;

    // Modifies session access, allowing a caller to do things like:
    //   - establish access as a specific identity
    //   - supply a crypto info, ultimately allowing decryption to occur for subsequent access.
    AccessGrant             = 2;

    // ChannelGenesis creates a new channel in the domain name specified in ChReq.URI.
    // ChReq.Entries[] are entries that are written into the new channel (and are part of the genesis tx).
    // When the channel has been created, the server will send a ChMsgOp.ChannelOpened message.
    ChannelGenesis          = 3;

    // Put atomically commits ChReq.Entries[] to the given ChURI.
    Put                     = 8;
        
    // Gets the entry (or entries) from the given ChURI.
    Get                     = 0x0080;
    GetShallow              = 0x0180;
    GetDeep                 = 0x0280;

    // GetAndSync is the usual Get on the requested keypath(s) but keeps the ChReq open to receive ch entry updates for qualifying keypaths.
    // The server sends the msg ChMsgOp.SyncStep following each atomic batch of updates.
    // This value can be bit ORed with any other Get* request op.
    GetAndSync              = 0x0480;

    // GetKeypathsOnly causes only ChMsg.Keypath strings to be returned (no data retrieval occurs). 
    // This value can be bit ORed with any other Get* request op.
    GetKeypathsOnly         = 0x0880;

}


// ChReq is generalized request sent from client to server via ServeChannel(). 
// The client sends a stream of ChReqs and monitors the ChMsgs that a server sends back to monitor status and completion.
message ChReq {

        // ReqOp requests that the given op to be execute on ChReq.Entries
                ChReqOp             ReqOp                       = 1;

    // ReqID is a client-assigned ID that allows the client and server to reference this ChReq in the future.
    // ChMsg.ReqClosed is how the server signals that a given ChReq is considered closed/complete.
                int32               ReqID                       = 2;

    // URI identifies the channel URI that this ChReq is requesting to access.
    // Channel URIs take the form of "DomainName/ChannelID".
                string              URI                         = 3;
                
    // ForkReqID specifies an open ChReqID to to use for state & credentials. 
                int32               ForkReqID                   = 4;

    // Entries are the operands of ChReq.ChOp.
    repeated    ChMsg               Entries                     = 6;
                          
}


// ChMsgOp is a collection of ChMsgOp values that have a special meaning in a ChMsg. 
enum ChMsgOp {
    
    // ChEntry means this is a content msg being sent in response to ChMsg.ReqID.
    ChEntry                 = 0;

    // ChReqErr is the server reporting an error for a the reference ReqID.
    // ChMsg.Attachment is a serialized ReqErr.
    ChReqErr                = 2;

    // OnTx is sent in response to an ChReq that inserts a change to a channel.
    // Receipt of this msg means a tx was generated and ChMsg.MsgData is the TxID.
    OnTx                    = 3;

    // ChannelOpened is sent by the server in response to ChReqOp.ChannelGenesis success.
    // ChMsg.ValueStr is set to the newly created channel URI.
    ChannelCreated          = 10;

    // SyncStep means all pending applicable state changes have been sent for the given ChMsg.ReqID.
    // This msg is only sent if a ChReq specified requested GetAndSync mode. 
    SyncStep                = 11;
}


// message ChInfo {
//                 string              ChURI                       = 1;

//                 bytes               GenesisTxID                 = 3;
// }



// ChMsg is the generalized response object a server sends to the client as it processes each ChReq sent by the client. 
message ChMsg {

    /*
    ** 
    **
    ** META FIELDS 
    ** These fields are NOT channel entry content fields.  They are used for Repo service request/response flow.
    ** They are zeroed before this ChMsg is stored as a channel entry.
    **
    ** 
    **/

    // MsgOp tells the client with this channel open that kind of ChMsg this is.
                ChMsgOp             MsgOp                       = 1;
                
    // ReqID references the originating ChReq that this ChMsg is in response to.
                int32               ReqID                       = 2;
    
    // ReqClosed is set if this the referenced ChReq (via ChMsg.ReqID) is considered complete and is now closed.
                bool                ReqClosed                   = 3;
                    
    // Keypath is a POSIX-style pathname of this channel entry (for safety, "/" specifies the root path, not "").
                string              Keypath                     = 5;


    /*
    ** 
    ** 
    ** CONTENT FIELDS
    ** These fields are considered the channel entry data.
    ** 
    ** 
    **/

    // LastModified is a timestamp of when this entry was last altered (in UTC seconds).
    // This timestamp is updated when it is written to a channel.
                int64               LastModified                = 10;

    // Optional values that can express commonly needed fields or allow this entry to be self-describing.
                string              TypeID                      = 20;
                string              Label                       = 21; 
                string              ValueStr                    = 22; 
                int64               ValueInt                    = 23;

    // X1, X2, and X3 are coordinates or values expressed in any unit.
    // A channel client can later declare how to interpret these coordinates so that a channel server and provide indexed services.
    // Shoutout to the 3 domains that reflect all theoretical completeness: alpha (finite), omega (unending), and the inaccessible cardinal(s).
    // Special thanks to Michael at Vsauce: https://www.youtube.com/watch?v=SrU9YDoXE88
                double              X1                          = 31;
                double              X2                          = 32;
                double              X3                          = 33;

    // Attachment is useful to attach any buffer, typically decoded based on ChMsg.MsgOp, ChMsg.Keypath, or ChMsg.TypeID.
    // It should generally should be limited to around 2MB (hard limit is 4MB).
                bytes               Attachment                  = 40;
}


// ReqErrCode is used to unambiguously express common errors.
enum ReqErrCode {
    NoErr                       = 0;
    
    UnnamedErr                  = 5000;
    ReqCancelled                = 5001;
    RepoShuttingDown            = 5002;

    ChReqIDNotFound             = 5010;
    ChReqIDAlreadyInUse         = 5011;
    InvalidChURI                = 5020;
    ChURINotFound               = 5021;

    ViolatesAppendOnly          = 5100;
    InsufficientPermissions     = 5101;

    ChProtocolNotRecognized     = 5201;
}


// ReqErr wraps errors and is typically used in conjunction with ChMsgOp.ChReqErr
message ReqErr {

                ReqErrCode          Code                        = 1;

    // Msg is a human-readable info string that offers amplifying info about the given error.
                string              Msg                         = 2;

}





// message SpaceNode {

//     // Transform means this Node and its sub nodes should be scaled by [0] (or [0,1,2]) and rotated according to thw quaternion stored in [1,2,3,4] (or [3,4,5,6])
//     // If omitted, implied scale is 1 and there no rotation is applied.
//     // For nodes that have this Node as the parent, their coordinates are relative to the coordinate space of this Node.
//     // Nested Transforms allow Node placements to be of arbitrary precision 
//     repeated    float               Transform                   = 4;
// }



// Reserved Keypath symbols used within ChEntry.Keypath during ChReqOp.Put
// $SELF_UUID       -- inserts an ID that reflects a unique ID associated with the current 
// $ITEM_UUID       -- inserts a newly generated inque value 
