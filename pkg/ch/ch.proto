syntax = "proto3";
package ch;


import "plan/plan.proto";



/*****************************************************
** ch/std/Links
**/

// Each entry is a plan.Link  :)


/*****************************************************
** ch/std/Space
**/



// Glyphs 0..127 are reserved by PLAN.
enum GlyphType {
    INVISIBLE               = 0;
    POINT                   = 1;
    SPHERE                  = 2;
    TETRAHEDRON             = 3;
    CUBE                    = 4;
    DODECAHEDRON            = 5;
    ICOSAHEDRON             = 6;

}


// Use for Node.Flags
enum NodeFlags {

    // Set if this node ID is accessible via global (external) lookup. 
    IS_GLOBAL_NODE              = 0;


    // Set if this node will appear in the channel's root node list.
    // Only valid if Node.SubSpace is set (since regular nodes can't be root nodes)
    // UPDATE: There is no *root* node -- all nodes are roots since there is no parent system etc.  
    // Attaching node spaces to nodes is how we nest nodes!
    //IS_ROOT_NODE                = 0;
    YOYO_BAGGINS = 1;


    // Determines what indicies will be autogenerated
    INDEX_BY_NODE_ID            = 2;
    INDEX_BY_X1                 = 3;
    INDEX_BY_X1_X2              = 4;
    INDEX_BY_T0                 = 5;
    INDEX_BY_TIME_ADDED         = 6; 
}


// Use for Link.Flags
enum LinkFlags {

    // Set if the target node should be used as a delegate for undefined properties on the source node.
    TARGET_IS_DELEGATE                 = 0;

    // Set if the source node should be used as a delegate for undefined properties on the target node.
    SOURCE_IS_DELEGATE                 = 1;

}


message V3 {
                float               x1                          = 1;
                float               x2                          = 2;
                float               x3                          = 3;
}

message VertexSet {
    repeated    float               float                       = 1;
    repeated    fixed32             RGBA                        = 2;
}



// A node and link ID are immutable base58-compliant identifers that are assigned when a node or link is created (and never change).  
// A node and link name are also identifiers, but references can dangle if a dependency is renamed.
// When a node or link reference is expressed, if the string is prefixed with a '@' then the string is a name, not a base58 ID.
// Names are allowed to have '/' but if they are formed into composite pathname, they must be escaped.
message Node {

    // Identifies the parent space this node resides in (see NodeSpace below) an implies property inheritance.
    // If this value is 0, then this is a root node (and Node.SubSpace must be set), otherwise 0 is illegal.
                Link                self                        = 1;    // Info about this node (i.e. self link)
                string              node_type_name              = 2;
                int32               glyphID                     = 3;    // Determines what glyph should be used to represent this node

                double              t0                          = 10;   // time
                double              x1                          = 11;   // See enum CordSys
                double              x2                          = 12;
                double              x3                          = 13;

                int32               flags                       = 14;   // NodeFlags
                int32               transparency                = 15;   // 0: alpha 1.0; 255: alpha 0.0

    repeated    NodeProperty        properties                  = 20;       
    repeated    Link                links                       = 21;   // Attached links
    repeated    bytes               channels                    = 22;   // Attached channels
                plan.Block          content                     = 23;

    // See comments for NodeSpace -- for this this field is a hack to express global properties about this NodeSpace channel
                NodeSpace           sub_space                   = 30;   

}

// Azimuth (longitude) spans -180 to +180 and inclination (latitude) spans -90 to +90. 
enum CordSys {                          // x1               x2                  x3
    CUSTOM                  = 0;
    LAT_LONG_ALT            = 1;        // latitude         longitude           altitude
    CARTESIAN               = 2;        // x                y                   z
    POLAR                   = 3;        // r                azimuth             z
    CYLINDRICAL             = 4;        // z                azimuth             r
    SPHERICAL               = 5;        // inclination      azimuth             r
}


message NodeProperty {

    // Identifies the property
                string              nameID                      = 1;  

    oneof value {
                int64               int                         = 10;
                double              double                      = 11;
                string              str                         = 12;
                fixed32             RGBA                        = 13;
                plan.Block          block                       = 14;
                string              nodeID                      = 15;
                string              linkID                      = 16;
                bytes               chID                        = 17;
                int64               timestamp                   = 18;
                Link                link                        = 19;
                V3                  V3                          = 20;
    }
}



// If a link does not have a name assigned, it is implicitly the linked node name (e.g. "@SiteOps").  This ensures a pathname still be valid if a linked node is renamed.
message Link {

    // Identifies this link (or node for Node.self) by a human readable identifier (optional).
    // If a link name is not assigned, it is implicitly the linked node's name (e.g. "@SiteOps").  This ensures a pathname still be valid if a linked node is renamed.
                string              name                        = 1; 

    // Immutable base58 ID assigned on creation
                string              ID                          = 2;

    // NodeID  := Base58NodeGUIDStr | GlobalNodeNameStr
    // LinkID  := Base58LinkGUIDStr | LocalLinkNameStr | LocalLinkedNodeName
    // NodePathname = [NodeSpaceChID] NodeID [[LinkID]*]
                string              node_pathname               = 4;

                int32               flags                       = 5;    // See LinkFlags
                int64               time_added                  = 7;
                float               weight                      = 8;    // Optional; open for interpretation
                float               flow                        = 9;    // Optional; open for interpretation
                int64               rank                        = 10;   // Optional; open for interpretation
    repeated    int32               tags                        = 11;   // Each int is a lookup into parent(s) tag lookup table
}


// All nodes in a NodeSpace channel are either a root node (with a NodeSpace defined), or are referenced via a NodeSpace.
// TODO: Basically, sub spaces aren't needed and can go away because we'll just make a "sub space" a channel link.
// ===> this means that we only need a NodeSpace 
message NodeSpace {
    
    // Self-assigned unique ordinal ID used by Nodes to express NodeSpace property inheritance.
    // A corruption condition would be for two different NodeSpaces to have the same spaceID.
                int32               spaceID                     = 1;

                CordSys             cord_sys                    = 2;
                string              cord_sys_domain             = 3;   // e.g.  "earth", "mars", "milky-way", "ABC Corp/Facility 5", "PLAN Systems/5th floor"
    repeated    float               cord_transform              = 4;   // 3 + 4 values that express scale and quaternion rotation 

    map<int32, string>              tag_lookup                  = 20;   // maps a tag ID to a tag string
    map<int32, string>              glyph_lookup                = 21;   // maps a glyph ID to a glyph resource name

}





/*****************************************************
** ch/std/Sheets
**/


enum SheetsOp {

    // Overwrites the given cell at (col,row) with the given value.
    SET_CELL_VALUE          = 0;

    // Inserts a row/col at the given index specified (the other index is ignored)
    INSERT_ROW              = 1;
    INSERT_COL              = 2;

}
message SheetsMsg {
                SheetsOp            op                          = 1;
                int32               col                         = 2;
                int32               row                         = 3;

                string              value                       = 10;
                //int32               count                       = 11;

}




/*



enum RegionType {

    // The first three points are the XYZ anchor point, and the 4th is the point gaussian radius (which is optional)
    POINT                   = 0;

    // The first three 3 are the XYZ anchor point and the the remaining are a sequence of XY cords that form a polygon.
    // The polygon assumed to be closed, so the last point shouldn't be a repeat of the first point.
    PATH_2D                 = 1;

    // The first three 3 are the XYZ anchor point and the the remaining express a R3 spine.
    SPLINE_2D               = 2;

}


message Region {

                RegionType          type                        = 1;


    // The first three points 
    repeated    double              transform                   = 2;

    // See RegionType
    repeated    double              pts                         = 2;

    // Specifies the stroke style and color, etc (or 0)
                uint32              stroke_style_id             = 3;
                uint32              fill_style_id               = 4;

                plan.Link           link                        = 5;

    repeated    Region              subs                        = 6;

}



// CordProtocol describes the kind of coordinate data in this data set.
enum CordType {

    // Each coordinate is 
    GEO_LAT                     = 0;
    GEO_LONG                    = 1;
    GEO_ALTITUDE                = 2;
    ANGULAR_DEGREES             = 3;
    METERS                      = 4;
    UTC_SECS                    = 7;

    // Only channel entries with a matching author member ID and epoch
    ABSTRACT_X                  = 3;
    ABSTRACT_Y                  = 4;
    ABSTRACT_Z                  = 5;
    ABSTRACT_ANGLE              = 5;

    // Units are in UTC seconds

}


message CordComponent {

                CordType            cord_type                   = 1;
                string              label                       = 2;


}

message LocationList {

    // Place protocol (knowing which data sets inherently refer to the same place)
    // e.g. 
    //    earth/
    //    drews-desktop/
                string              place_protocol              = 1;

    // Coordinate protocol (interoperability amongst data sets and determines UX look and feel)
    // e.g. 
    //    geo/lat-long
    //    abstract/xyz
                CordProtocol        cord_protocol               = 2;

    
}

*/
