/*********************************************************************************************************************
**
**            P urposeful
**            L ogistics
**            A rchitecture
**   P  L  A  N etwork
**
**
**  May PLAN support her users, the members of PLAN Systems, and myself so that I could not wish for more. 
**
**  May PLAN manifest joy at the largest scale possible (that's really big!)
**
**********************************************************************************************************************/

// See http://github.com/plan-systems/plan-protobufs/
syntax = "proto3";
package plan;

/******************************************************************************************************************************************
plan.Block is a fundamental PLAN data structure intended for generic content packaging and serialization. 
Its purpose is to be a flexible, extensible content container able to hold any number of sub containers, 
each containing content serialized in any form.

The principles behind Block were inspired from http, championed by Tim Berners-Lee and others in the 1990s. 
In http, "Content-Type" specifies a MIME type, a codec descriptor that specifies the binary format of content. 
In PLAN, every content blob (Block) has BOTH a label AND codec descriptor, allowing for more powerful use cases. 
Block.label tells clients HOW TO USE Block.content while Block.codec tells clients WHICH DATA HANDLER should be applied.

Examples:

    Block.label     Block.codec             Block.content
    -----------     -----------             -------------
    episode         audio/mp3               <mp3 data>
    episode         video/mpeg              <mpeg data>
    about           application/json        {title:"Introducing PLAN!", ep_num:42}
    icon            image/png               <png data>
    contact         /twitter/username       @juanbenet
    contact         /emailto                sj@apple.com
    Extras          /plan/Block/1           <protobuf encoding of plan.Block>
    personal-keys   /plan/ski/KeyList/1     <protobuf encoding of ski.KeyList>
    Message         text/plain              Hello, Universe!
    Message         text/rtf                {\rtf1\ansi\ansicpg1252...
    do-some-op      eth-block-list          <Ethereum RLP>
    do-other-op     eth-block-list          <Ethereum RLP>
    
*/

// Block is a portable, compact, self-describing, nestable information container inspired from HTTP.
message Block {

    // An optional, name/label for this Block (i.e. a field-name).
    // A Block's label conforms to the context/protocol it's being used with (as applicable).
                string              label                   = 1;

    // Like a MIME type, this descriptor self-describes the data format of Block.content.
    // Anyone handed this Block uses this field to accurately process/deserialize its content.
    // This is a "multicodec path" -- see: https://github.com/multiformats/multistream
                string              codec                   = 2;

    // This is a reserved integer alternative to Block.Codec.
    // See: https://github.com/multiformats/multicodec/blob/master/table.csv
                uint32              codec_code              = 3;

    // Payload data, serialized in accordance with the accompanying codec descriptors (above).
                bytes               content                 = 4;
                string              content_str             = 5;

    // A Block can optionally contain nested "sub" blocks.  A Block's sub-blocks
    //    can be interpreted or employed any way a client or protocol sees fit.
    repeated    Block               subs                    = 10;
}



/****************  PLAN link URIs  *****************

<plan_community_addr> := /plan/[.|@<lookup_by_name>|#<community_genesis_hash>|![<federation_name>]]/

<ch_protocol>    := "[std|<ch_protocol_family>]/<protocol_pathname>
<channel_link>   := <plan_community_addr>/ch/<ch_protocol>/ChID/<base64url ChID>
<cfi_asset_link> := <plan_community_addr>/cfi/[ipfs|<cfi_impl>]/<asset_name>
<member_link>    := <plan_community_addr>/member/id/<member_id>
<entry_link>     := <channel_link>/<entry_TID>
<http_link>      := /http/[plan-systems.org|<url>]

*/



// Link is an opaque URI most comparable to a URL, but it's "multiaddr" style, rather than protocol://URI.
message Link {

    // THis is an optional label that describes this link or serves as an identifying key (and is follows a naming convention so this link can be identified by label)
    // This value is typically not seen by humans.
                string              label                       = 1;

    // This describes this link in a meaningful way
                string              desc                        = 2;

    // See docs on PLAN URIs (above)
                string              uri                         = 3;

}


message ChInvocation {
                bytes               chID                        = 1;
                string              ch_protocol                 = 2;
                string              ch_adapterID                = 3;
}



enum ValType {
    NONE                    = 0;
    INT                     = 1;
    FLOAT                   = 2;
    STR                     = 3;
    BLOCK                   = 4;
}



enum Encoding {

    Unspecified             = 0;

    // A PLAN StorageProvider txn payload segment
    TxnPayloadSegment       = 1;

    // A protobufs-encoded plan.Block
    Pb_Block                = 2;

    // A protobufs-encoded pdi.EntryCrypt
    Pb_EntryCrypt           = 3;

    // A protobufs-encoded pdi.EntryInfo
    Pb_EntryInfo            = 4;

}



enum ServiceType {
    Undefined               = 0;

    StorageProvider         = 1;
    Repo                    = 2;
    WsHost                  = 3;
    ServiceTracker          = 4;
}


// ServiceInfo contains descriptions, network addresses, ports, and connection info for remote services.
message ServiceInfo {
                ServiceType         service_type                = 1;
                string              nameID                      = 2;
                bytes               nodeID                      = 3;
                string              desc                        = 4;
                
                string              addr                        = 10;        // e.g. "128.192.2.11", "128.192.2.11:5192", ":5192"
                string              network                     = 11;        // e.g. "tcp"

}





message Val {
    
    // The value's name/label/key
                string              name                        = 1;

    // Specifies which of the below are set/valid
                ValType             val_type                    = 2;

                int64               int                         = 3;
                double              float                       = 4;
                string              str                         = 5;
                Block               block                       = 6; 
}

message Status {

    // Information code
                int32               code                        = 1;

    // Information msg
                string              msg                         = 2;

    // An unordered list of arbitrary fields/params associated with this error
    repeated    Val                 params                      = 3;

}

